def plot_thesis_dendrogram(fmap_x,fmap_y,fmap_flux):
    """
    Plots figures for dendrogram analysis
    Inputs:
        fmap_x = fmap_x (Footprint-weighted Flux Map data x-coordinates)
        fmap_y = fmap_y (Footprint-weighted Flux Map data y-coordinates)
        fmap_flux = matched_ffp['ch4'] (Footprint-weighted Flux Map flux values)
        * all input data have been coarsened to 30 m resolution
    Outputs:
        Figure a) Dendrogram
        Figure b) Footprint-weighted Flux Map plot
        Figure c) Clustered flux map
    Return:
        fig (subplot with Figures a,b,c)
    """
    import numpy as np
    import matplotlib.pyplot as plt
    from scipy.cluster.hierarchy import dendrogram, linkage
    from sklearn.cluster import AgglomerativeClustering

    

    # DENDROGRAM
    fig = plt.figure(figsize=(8, 15))
    plt.subplot(3,1,1)
    plt.scatter(fmap_x,fmap_y,c=fmap_flux,marker = 's',s=350)
    plt.axvline(0,c='k',linestyle='--',alpha=0.7)
    plt.axhline(0,c='k',linestyle='--',alpha=0.7)
    plt.title('Footprint-weighted Flux Map',fontsize=20,fontweight='bold')
    plt.xlabel('Distance from tower [m]',fontsize=16)
    plt.ylabel('Distance from tower [m]',fontsize=16)
    plt.text(-162,137,'a)',fontsize = 22)

    plt.subplot(3,1,2)
    dend_data = np.transpose([np.unique(fmap_flux),np.unique(fmap_flux)])
    linked = linkage(dend_data,'ward')

    dendrogram(linked, 
            orientation='top', 
            distance_sort='descending',
            truncate_mode='lastp',
            p=30)
    # plt.axhline(0.2,c='k',linestyle='--',alpha=0.5)
    plt.title('Dendrogram',fontsize=20,fontweight='bold')
    plt.ylabel('distance',fontsize=16)
    plt.xlabel('Data clusters',fontsize=16)
    plt.text(7,805,'b)',fontsize = 22)

    plt.subplot(3,1,3)
    dend_data = np.transpose([fmap_flux,fmap_flux])
    linked = linkage(dend_data,'ward')
    #now cluster
    n_clusters = 5
    cluster = AgglomerativeClustering(n_clusters=n_clusters, affinity='euclidean', linkage='ward')

    cn_PC = cluster.fit_predict(dend_data)
    #find mean pattern of each cluster
    cluster_pattern_PC = np.empty((n_clusters,np.shape(dend_data)[1]))

    # For 2 clusters
    for cluster_num in range(n_clusters):
        inds_PC = np.argwhere(cn_PC==cluster_num)
        cluster_pattern_PC[cluster_num,:] = np.mean(dend_data[inds_PC,:],axis=0)
    # Plotting    
    for i in range(len(np.unique(cn_PC))):
        clus_num = np.where(cn_PC==i)[0]
        plt.scatter(np.array(fmap_x)[clus_num],np.array(fmap_y)[clus_num],label=f'cluster {i+1}',marker = 's',s=350)
    plt.axvline(0,c='k',linestyle='--',alpha=0.7)
    plt.axhline(0,c='k',linestyle='--',alpha=0.7)
    plt.ylabel('metres')
    plt.xlabel('metres')
    plt.title('Footprint pixel by cluster',fontsize = 20, fontweight='bold')
    plt.legend(loc='upper right',fontsize='small',markerscale=0.5)
    plt.text(-170,148,'c)',fontsize = 22)

    plt.tight_layout()

    # plt.show()

    return fig

def compiled_regression(FARF_list, correlation="Spearman"):
    import numpy as np
    import pickle 
    from scipy import stats
    import matplotlib.pyplot as plt

    """
    Compiles FARF analyses from /MSc_Geography/MSc Thesis/Data/Compilation

    Takes in: 
            1) List of cluster-completed FARF data. 
            E.g:
            ['Young_FFP=202105027-202106029_L8=20210527',
             'Young_FFP=202106007-202106021_L8=20210612',
             'Young_FFP=202107020-202108020_L8=20210808']

            2) Correlation approach. Either "Spearman" or "Pearson". Default is set to "Spearman"

    Outputs 2 figures:
        Fig 1) Subplot of each observation 
        Fig 2) Regression plot of all observations collapsed into a single dataset.
    Returns:
        Fig 1
        Fig 2
        compiled data
    
    """
    # Folder that all .p datafiles are stored in
    dataPath = '/Users/darianng/Documents/MSc_Geography/MSc Thesis/Data/Compilation'

    indices = ['NDWI','NDMI','NDVI','temp']

    # Storing all runs into single dict, while keeping runs separate
    collected_regression = {'period':[],'r_val':[],'p_val':[],'landsat':[],'ffp':[],'yfit':[]}

    # Collapsing all runs into single lists
    collapsed_landsat = {'NDWI':[],'NDMI':[],'NDVI':[],'temp':[]}
    collapsed_ffp = []

    # Loading data
    for this_FARF in FARF_list:
        os.chdir(dataPath)
        with open(f'{this_FARF}.p', 'rb') as fp:
            data = pickle.load(fp)
        collected_regression['period'].append(this_FARF)
        collected_regression['landsat'].append(data['mean_clustered_landsat'])
        collected_regression['ffp'].append(data['mean_clustered_ffp'])
        collapsed_ffp.extend(data['mean_clustered_ffp'])
        for key in collapsed_landsat.keys():
            collapsed_landsat[key].extend(data['mean_clustered_landsat'][key])

    # Plotting figure 1: Subplot of each observation handled individually
    fig1 = plt.figure(figsize=(15,3*len(FARF_list)))
    for ii in range(len(collected_regression['period'])):
        for kk,idx in enumerate(indices):
            plt.subplot(len(FARF_list),4,kk+1)
            plt.scatter(collected_regression['landsat'][ii][idx],collected_regression['ffp'][ii])
            m, b = np.polyfit(collected_regression['landsat'][ii][idx],collected_regression['ffp'][ii],1)
            yfit = m*np.array(collected_regression['landsat'][ii][idx])+b
            plt.plot(collected_regression['landsat'][ii][idx],yfit,'orange')
            plt.ylabel('CH4 flux',fontsize = 14)
            plt.xlabel(idx,fontsize = 14)
            plt.title(f"{idx}: {collected_regression['period'][ii][-8:-4]}-{collected_regression['period'][ii][-4:-2]}-{collected_regression['period'][ii][-2:]}",fontweight = 'bold',fontsize = 16)
            
            if correlation == 'Pearson':
                r_val, p_val = stats.pearsonr(collected_regression['landsat'][ii][idx],collected_regression['ffp'][ii])
            if correlation == 'Spearman':
                r_val, p_val = stats.spearmanr(collected_regression['landsat'][ii][idx],collected_regression['ffp'][ii])

            corr = f'r: {r_val} \np = {np.round(p_val,5)}'
        
            plt.text(max(collected_regression['landsat'][ii][idx]),max(collected_regression['ffp'][ii])+0.005,corr,ha='right',fontsize = 14)

    plt.tight_layout()

    # Plotting Figure 2: Compiled Regression
    fig2 = plt.figure(figsize=(15,3))
    for idx,key in enumerate(collapsed_landsat.keys()):
        plt.subplot(1,4,idx+1)
        plt.scatter(collapsed_landsat[key],collapsed_ffp,s=10)
        plt.title(key,fontsize=16,fontweight='bold')
        plt.ylabel('CH4 Flux [Âµmol/m2/s]')
        plt.xlabel(key)
    plt.tight_layout()

    compiled_data = {'collected_regression':collected_regression,'collapsed_landsat':collapsed_landsat,'collapsed_ffp':collapsed_ffp}

    return fig1, fig2, compiled_data